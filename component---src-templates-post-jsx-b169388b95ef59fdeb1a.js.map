{"version":3,"sources":["webpack:///./src/components/UserInfo/UserInfo.jsx","webpack:///./src/components/Disqus/Disqus.jsx","webpack:///./src/components/PostInfo/PostInfo.jsx","webpack:///./src/components/SocialLinks/SocialLinks.jsx","webpack:///./src/components/PostSuggestions/PostSuggestions.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/SEO/SEO.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/PostCover.jsx"],"names":["components_UserInfo_UserInfo","render","_this$props$config","this","props","config","userAvatar","userName","userLocation","userDescription","userLinks","userTwitter","expanded","userLinksElement","react_default","a","createElement","UserLinks","labeled","Card_default","className","CardTitle_default","expander","avatar","Avatars_default","src","role","title","subtitle","dist","Follow","username","options","count","CardText_default","expandable","IconSeparator_default","label","iconBefore","FontIcons_default","iconClassName","c","react","Component","C","l","D","n","R","I","M","P","S","G","components_Disqus_Disqus","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","_this$props","postNode","SiteConfig_default","disqusShortname","post","frontmatter","url","url_join_default","siteUrl","pathPrefix","fields","slug","icon","main_default","shortname","identifier","category_id","onNewComment","Snackbars_default","onDismiss","U","T","F","V","Z","k","W","components_PostInfo_PostInfo","moment_default","date","format","dateFormat","timeToRead","gatsby_browser_entry","Link","to","kebabCase_default","category","X","z","L","J","q","K","_","$","AA","cA","lA","eA","aA","tA","hA","sA","components_SocialLinks_SocialLinks","postPath","mobile","iconSize","renderShareCount","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","LinkedinShareButton","description","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","PostSuggestions_PostSuggestions_PostSuggestions","postFields","prevSlug","forceFontSize","forceSize","prevTitle","nextSlug","nextTitle","nA","d","oA","gA","post_PostTemplate","PostTemplate","_React$Component","handleResize","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","pageContext","postOverlapClass","data","markdownRemark","id","postDefaultCategoryID","coverHeight","layout","location","Helmet_default","siteTitle","rel","href","SEO","postSEO","PostCover","coverClassName","Cards_default","dangerouslySetInnerHTML","__html","html","PostTags","tags","pageQuery","react__WEBPACK_IMPORTED_MODULE_2___default","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","key","style","textDecoration","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","react__WEBPACK_IMPORTED_MODULE_2__","__webpack_exports__","g","340","A","342","exports","allFile","edges","node","absolutePath","childImageSharp","resolutions","base64","tracedSVG","aspectRatio","width","height","srcSet","srcWebp","srcSetWebp","originalName","internal","contentDigest","type","owner","fluid","sizes","343","347","e","t","h","s","v","i","o","image","postURL","postMeta","cover","url_join__WEBPACK_IMPORTED_MODULE_3___default","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_4___default","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","content","JSON","stringify","property","siteFBAppID","react__WEBPACK_IMPORTED_MODULE_1__","E","349","PostCoverComponent","fileEdges","coverNodeList","filter","fileNode","indexOf","path_browserify_default","join","length","gatsby_image_default","outerWrapperClassName","coverURL","substring","backgroundImage","PostCover_queryWrapper","StaticQuery","query","_590853412","587","606","608","632","634","636"],"mappings":"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","file":"component---src-templates-post-jsx-b169388b95ef59fdeb1a.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport IconSeparator from \"react-md/lib/Helpers/IconSeparator\";\nimport { Follow } from \"react-twitter-widgets\";\nimport UserLinks from \"../UserLinks/UserLinks\";\nimport \"./UserInfo.scss\";\n\nclass UserInfo extends Component {\n  render() {\n    const {\n      userAvatar,\n      userName,\n      userLocation,\n      userDescription,\n      userLinks,\n      userTwitter\n    } = this.props.config;\n    const { expanded } = this.props;\n    const userLinksElement = (\n      <UserLinks config={this.props.config} labeled={expanded} />\n    );\n    if (!userAvatar && !userName && !userLocation && !userDescription) {\n      if (userLinks) {\n        return (\n          <Card className=\"md-grid md-cell md-cell--12 user-info\">\n            {userLinksElement}\n          </Card>\n        );\n      }\n      return null;\n    }\n    return (\n      <Card className=\"md-grid md-cell md-cell--12 user-info\">\n        <CardTitle\n          expander={!expanded}\n          avatar={userAvatar && <Avatar src={userAvatar} role=\"presentation\" />}\n          title={userName && userName}\n          subtitle={\n            userTwitter ? (\n              <Follow\n                username={userTwitter}\n                options={{ count: expanded ? \"none\" : \"none\" }}\n              />\n            ) : (\n              \"Author\"\n            )\n          }\n        />\n        <CardText expandable={!expanded}>\n          {userLocation && (\n            <IconSeparator label={userLocation} iconBefore>\n              <FontIcon iconClassName=\"fa fa-map-marker\" />\n            </IconSeparator>\n          )}\n          <p>{userDescription && userDescription}</p>\n          {userLinksElement}\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport Snackbar from \"react-md/lib/Snackbars\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode, expanded } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n\n    return (\n      <Card className=\"md-grid md-cell md-cell--12\">\n        <CardTitle\n          title=\"Comments\"\n          avatar={<Avatar icon={<FontIcon>comment</FontIcon>} />}\n          expander={!expanded}\n        />\n        <CardText expandable={!expanded}>\n          <ReactDisqusComments\n            shortname={config.disqusShortname}\n            identifier={post.title}\n            title={post.title}\n            url={url}\n            category_id={post.category_id}\n            onNewComment={this.notifyAboutComment}\n          />\n        </CardText>\n        <Snackbar\n          toasts={this.state.toasts}\n          onDismiss={this.onSnackbarDismiss}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostInfo.scss\";\n\nclass PostInfo extends Component {\n  render() {\n    const { postNode } = this.props;\n    const post = postNode.frontmatter;\n    return (\n      <div className=\"post-info\">\n        <CardTitle\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postNode.fields.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postNode.timeToRead} min read`}\n        />\n        <Link\n          className=\"category-link\"\n          to={`/categories/${_.kebabCase(post.category)}`}\n        >\n          <CardTitle\n            avatar={\n              <Avatar icon={<FontIcon iconClassName=\"fa fa-folder-open\" />} />\n            }\n            title=\"In category\"\n            subtitle={post.category}\n          />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default PostInfo;\n","import React, { Component } from \"react\";\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./SocialLinks.scss\";\n\nclass SocialLinks extends Component {\n  render() {\n    const { postNode, postPath, mobile } = this.props;\n    const post = postNode.frontmatter;\n    const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    const iconSize = mobile ? 36 : 48;\n    const filter = count => (count > 0 ? count : \"\");\n    const renderShareCount = count => (\n      <div className=\"share-count\">{filter(count)}</div>\n    );\n\n    return (\n      <div className=\"social-links\">\n        <RedditShareButton url={url} title={post.title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => renderShareCount(count)}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={post.title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => renderShareCount(count)}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={postNode.excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => renderShareCount(count)}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={post.title}\n          description={postNode.excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => renderShareCount(count)}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    );\n  }\n}\n\nexport default SocialLinks;\n","import React, { Component } from \"react\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport \"./PostSuggestions.scss\";\n\nexport default class PostSuggestions extends Component {\n  render() {\n    const { postNode } = this.props;\n    const postFields = postNode.fields;\n    return (\n      <div className=\"post-suggestions md-grid md-cell--12\">\n        <Link to={postFields.prevSlug} className=\"post-suggestion\">\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_back\n          </FontIcon>\n          <div className=\"headline-container hide-on-mobile\">\n            <h2 className=\"md-body-2 secondary-color\">Previous</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.prevTitle}\n            </h6>\n          </div>\n        </Link>\n        <Link to={postFields.nextSlug} className=\"post-suggestion\">\n          <div className=\"headline-container\">\n            <h2 className=\"md-body-2 secondary-color\">Next</h2>\n            <h6 className=\"md-headline secondary-color\">\n              {postFields.nextTitle}\n            </h6>\n          </div>\n          <FontIcon\n            forceFontSize\n            forceSize={64}\n            className=\"secondary-color arrow-nav\"\n          >\n            arrow_forward\n          </FontIcon>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Card from \"react-md/lib/Cards\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport Layout from \"../layout\";\nimport UserInfo from \"../components/UserInfo/UserInfo\";\nimport Disqus from \"../components/Disqus/Disqus\";\nimport PostTags from \"../components/PostTags/PostTags\";\nimport PostCover from \"../components/PostCover/PostCover\";\nimport PostInfo from \"../components/PostInfo/PostInfo\";\nimport SocialLinks from \"../components/SocialLinks/SocialLinks\";\nimport PostSuggestions from \"../components/PostSuggestions/PostSuggestions\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./b16-tomorrow-dark.css\";\nimport \"./post.scss\";\n\nexport default class PostTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n\n  render() {\n    const { mobile } = this.state;\n    const { slug } = this.props.pageContext;\n    const expanded = !mobile;\n    const postOverlapClass = mobile ? \"post-overlap-mobile\" : \"post-overlap\";\n    const postNode = this.props.data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n    const coverHeight = mobile ? 180 : 350;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"post-page md-grid md-grid--no-spacing\">\n          <Helmet>\n            <title>{`${post.title} | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}${post.id}`} />\n          </Helmet>\n          <SEO postPath={slug} postNode={postNode} postSEO />\n          <PostCover\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName=\"md-grid md-cell--9 post-cover\"\n          />\n          <div\n            className={`md-grid md-cell--9 post-page-contents mobile-fix ${postOverlapClass}`}\n          >\n            <Card className=\"md-grid md-cell md-cell--12 post\">\n              <CardText className=\"post-body\">\n                <h1 className=\"md-display-2 post-header\">{post.title}</h1>\n                <PostInfo postNode={postNode} />\n                <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n              </CardText>\n              <div className=\"post-meta\">\n                <PostTags tags={post.tags} />\n                <SocialLinks\n                  postPath={slug}\n                  postNode={postNode}\n                  mobile={this.state.mobile}\n                />\n              </div>\n            </Card>\n            <UserInfo\n              className=\"md-grid md-cell md-cell--12\"\n              config={config}\n              expanded={expanded}\n            />\n            <Disqus postNode={postNode} expanded={expanded} />\n          </div>\n\n          <PostSuggestions postNode={postNode} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        date\n        category\n        tags\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n        date\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n"],"sourceRoot":""}