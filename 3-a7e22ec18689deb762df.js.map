{"version":3,"sources":["webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/PostPreview/PostPreview.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/components/PostCover/PostCoverComponent.jsx","webpack:///./src/components/PostCover/PostCover.jsx","webpack:///./node_modules/react-md/lib/Media/index.js"],"names":["PostTags","render","tags","this","props","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","map","tag","gatsby__WEBPACK_IMPORTED_MODULE_3__","Link","key","style","textDecoration","to","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_1___default","react_md_lib_Chips__WEBPACK_IMPORTED_MODULE_4___default","label","c","react__WEBPACK_IMPORTED_MODULE_2__","Component","__webpack_exports__","b","340","A","l","342","exports","data","allFile","edges","node","id","absolutePath","childImageSharp","resolutions","base64","tracedSVG","aspectRatio","width","height","src","srcSet","srcWebp","srcSetWebp","originalName","internal","contentDigest","type","owner","fluid","sizes","343","348","h","n","e","v","t","s","g","E","d","i","B","o","j","f","m","Q","r","p","w","Y","x","N","D","y","C","components_PostPreview_PostPreview","PostPreview","_this","_Component","call","state","mobile","handleResize","bind","assertThisInitialized_default","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","react_default","Card_default","path","raise","gatsby_browser_entry","Media_default","paddingBottom","PostCover","postNode","Media","MediaOverlay","CardTitle_default","title","Buttons_default","raised","secondary","expander","avatar","Avatars_default","icon","FontIcons_default","iconClassName","moment_default","date","format","SiteConfig_default","dateFormat","subtitle","timeToRead","CardText_default","expandable","excerpt","react","PostListing_PostListing","getPostList","postList","postEdges","forEach","postEdge","push","fields","slug","frontmatter","cover","post","I","349","PostCoverComponent","_this$props","fileEdges","coverClassName","coverNodeList","filter","fileNode","indexOf","path_browserify_default","join","length","gatsby_image_default","outerWrapperClassName","coverURL","substring","backgroundImage","PostCover_queryWrapper","StaticQuery","query","_590853412","638","__esModule","_Media3","_interopRequireDefault","__webpack_require__","_MediaOverlay3","obj","default"],"mappings":"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","file":"3-a7e22ec18689deb762df.js","sourcesContent":["import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostTags.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-tag-container\">\n        {tags &&\n          tags.map(tag => (\n            <Link\n              key={tag}\n              style={{ textDecoration: \"none\" }}\n              to={`/tags/${_.kebabCase(tag)}`}\n            >\n              <Chip label={tag} className=\"post-preview-tags\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags/PostTags\";\nimport PostCover from \"../PostCover/PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview/PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport path from \"path\";\nimport \"./PostCover.scss\";\n\nclass PostCover extends Component {\n  render() {\n    const { fileEdges, postNode, coverHeight, coverClassName } = this.props;\n    const post = postNode.frontmatter ? postNode.frontmatter : postNode;\n    const coverNodeList = fileEdges.filter(fileNode => {\n      if (fileNode.node.childImageSharp === null) return false;\n\n      if (\n        fileNode.node.absolutePath.indexOf(\n          path.join(\"/static/assets/\", post.cover)\n        ) !== -1\n      )\n        return true;\n\n      return false;\n    });\n\n    if (coverNodeList.length === 1) {\n      return (\n        <Img\n          fluid={coverNodeList[0].node.childImageSharp.fluid}\n          outerWrapperClassName={coverClassName}\n          style={{ height: coverHeight, width: \"100%\" }}\n        />\n      );\n    }\n\n    /* eslint no-undef: \"off\" */\n    const coverURL =\n      post.cover.substring(0, 1) === \"/\"\n        ? __PATH_PREFIX__ + post.cover\n        : post.cover;\n    return (\n      <div\n        style={{\n          backgroundImage: `url(${coverURL})`,\n          height: `${coverHeight}px`\n        }}\n        className={coverClassName}\n      />\n    );\n  }\n}\n\nexport default PostCover;\n","import React, { Component } from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport PostCover from \"./PostCoverComponent\";\n\nclass queryWrapper extends Component {\n  render() {\n    const { postNode, coverHeight, coverClassName } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query CoverQuery {\n            allFile {\n              edges {\n                node {\n                  id\n                  absolutePath\n                  childImageSharp {\n                    id\n                    resolutions {\n                      base64\n                      tracedSVG\n                      aspectRatio\n                      width\n                      height\n                      src\n                      srcSet\n                      srcWebp\n                      srcSetWebp\n                      originalName\n                    }\n                    internal {\n                      contentDigest\n                      type\n                      owner\n                    }\n                    fluid(maxWidth: 1240) {\n                      ...GatsbyImageSharpFluid\n                      originalName\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={data => (\n          <PostCover\n            fileEdges={data.allFile.edges}\n            postNode={postNode}\n            coverHeight={coverHeight}\n            coverClassName={coverClassName}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default queryWrapper;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;"],"sourceRoot":""}